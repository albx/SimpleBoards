@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="viewModel" class="col-md-12" role="form" OnValidSubmit="AddComment">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="@nameof(viewModel.CommentText)">Write a comment</label>
        <InputTextArea @bind-Value="viewModel.CommentText" class="form-control" DisplayName="@nameof(viewModel.CommentText)" />
        <ValidationMessage For="@(() => viewModel.CommentText)" />
    </div>
    <div class="form-group">
        <button type="reset" class="btn btn-outline-primary mr-3" @onclick="Cancel">Cancel</button>
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<NewCommentModel> OnNewCommentAdded { get; set; }

    private NewCommentModel viewModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        viewModel.UserId = authenticationState.User.FindFirst(c => c.Type == "sub").Value;
    }

    void Cancel() => viewModel.CommentText = null;

    async Task AddComment() 
    {
        await OnNewCommentAdded.InvokeAsync(viewModel);
        viewModel.CommentText = null;
    }
}