@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services

@inject LazyAssemblyLoader AssemblyLoader

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly"
            PreferExactMatches="@true"
            AdditionalAssemblies="lazyLoadedAssemblies"
            OnNavigateAsync="NavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    List<Assembly> lazyLoadedAssemblies = new();

    async Task NavigateAsync(NavigationContext context)
    {
        if (context.Path == "users")
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                new[] { "SimpleBoards.Web.Users.dll" });

            lazyLoadedAssemblies.AddRange(assemblies);
        }
    }
}
