@page "/issues/{issueId:int}"
@attribute [Authorize]
@inject IssuesHttpClient IssuesClient
@inject CommentsHttpClient CommentsClient

@if (viewModel.Issue is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="row">
        <div class="col">
            <h2>@viewModel.Issue.Title</h2>
        </div>
        <div class="col-auto">
            <a href="boards/@viewModel.Issue.Board.Id/issues" class="btn btn-primary">Back</a>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-8">
            <div class="row form-group">
                <label class="col-md-2"><strong>Title</strong></label>
                <div class="col-md-10">@viewModel.Issue.Title</div>
            </div>
            <div class="row form-group">
                <label class="col-md-2"><strong>Type</strong></label>
                <div class="col-md-10">@viewModel.Issue.Type</div>
            </div>
            <div class="row form-group">
                <label class="col-md-2"><strong>State</strong></label>
                <div class="col-md-10">@viewModel.Issue.State</div>
            </div>
            <div class="row form-group">
                <label class="col-md-2"><strong>Board</strong></label>
                <div class="col-md-10">@viewModel.Issue.Board.Name</div>
            </div>
            <div class="row form-group">
                <label class="col-md-2"><strong>Reporter</strong></label>
                <div class="col-md-10">@(viewModel.Issue.Reporter.UserName ?? "-")</div>
            </div>
            <div class="row form-group">
                <label class="col-md-2"><strong>Assignee</strong></label>
                <div class="col-md-10">@(viewModel.Issue.Assignee?.UserName ?? "Unassigned")</div>
            </div>
            <div class="row form-group">
                <label class="col-md-2"><strong>Tester</strong></label>
                <div class="col-md-10">@(viewModel.Issue.Tester?.UserName ?? "-")</div>
            </div>
            <div class="row form-group">
                <label class="col-md-2"><strong>Created at</strong></label>
                <div class="col-md-10">@viewModel.Issue.CreatedAt.ToShortDateString()</div>
            </div>
            @if (!string.IsNullOrWhiteSpace(viewModel.Issue.Description))
            {
                <div class="form-group">
                    <label><strong>Description</strong></label>
                    <div>@viewModel.Issue.Description</div>
                </div>
            }
        </div>
        <div class="col-md-4">
            @if (viewModel.Comments is null)
            {
                <h4>Loading comments...</h4>
            }
            else
            {
                <div class="row">
                    <h4>Comments</h4>
                </div>
                <div class="row">
                    <NewComment OnNewCommentAdded="AddComment" />
                </div>
                <hr/>
                <div class="row">
                    <CommentList Comments="viewModel.Comments"
                                 OnCommentRemoved="DeleteComment"/>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int IssueId { get; set; }

    private IssueDetailViewModel viewModel = new();

    public class IssueDetailViewModel
    {
        public IssueDetailModel Issue { get; set; }

        public List<CommentModel> Comments { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        viewModel.Issue = await IssuesClient.GetIssueDetail(IssueId);

        await LoadComments();
    }

    async Task LoadComments()
    {
        var comments = await CommentsClient.GetComments(IssueId);
        viewModel.Comments = comments.ToList();
    }

    async Task AddComment(NewCommentModel model)
    {
        await CommentsClient.AddNewComment(IssueId, model);
        await LoadComments();
    }

    async Task DeleteComment(CommentModel comment)
    {
        await CommentsClient.DeleteComment(IssueId, comment.Id);
        viewModel.Comments.Remove(comment);
    }
}