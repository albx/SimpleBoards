@page "/users"
@using SimpleBoards.Web.Users.Controls 

@inject UsersHttpClient Client

<div class="row">
    <div class="col">
        <h2>Users</h2>
    </div>
    <div class="col-auto">
        <a href="" class="btn btn-primary">Back</a>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-5">
        <ul class="list-unstyled">
            @if (users.Users is not null)
            {
                foreach (var user in users.Users)
                {
                    <li>@user.UserName</li>
                }
            }
        </ul>
    </div>
    <div class="col-md-7">
        <div class="row">
            <EditForm Model="@newUser" role="form" class="col-md-12" OnValidSubmit="RegisterUser">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="newUser.UserName" class="form-control" DisplayName="@nameof(newUser.UserName)" />
                    <ValidationMessage For="@(() => newUser.UserName)" />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="newUser.Email" class="form-control" DisplayName="@nameof(newUser.Email)" />
                    <ValidationMessage For="@(() => newUser.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="newUser.Password" class="form-control" DisplayName="@nameof(newUser.Password)" />
                    <ValidationMessage For="@(() => newUser.Password)" />
                </div>
                <div class="form-group">
                    <button type="reset" class="btn btn-outline-primary mr-3" @onclick="Cancel">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private UsersListModel users = new();

    private RegisterUserModel newUser = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadUsers();
    }

    async Task LoadUsers() => users = await Client.GetUsers();

    void Cancel() => newUser = new();

    async Task RegisterUser()
    {
        await Client.RegisterUser(newUser);
        newUser = new();

        await LoadUsers();
    }
}
